import {writeFile, readFileSync} from "fs";
import {normalize, join} from "path";
import SettingManager from "./setting-manager-class";
import {parseInterface, replaceInterface} from "./interface-parser";
import {log} from "./log-manager";

const local = (path) => normalize(join(__dirname, path));
const interfaceDevice = "eth0";
const filename = local("settings.json");
const interfacesFile = local("../test-interfaces");
let interfacesData;
let settings;

try {
  settings = JSON.parse(readFileSync(filename));
} catch(error) {
  log("error", `Failed to load settings from file system: ${error}`);
  settings = {};
}

try {
  interfacesData = readFileSync(interfacesFile).toString();
} catch(error) {
  log("error", `Failed to load network interfaces from file system: ${error}`);
  interfacesData = `
# default interfaces data generated by SmartPumps

auto lo
iface lo inet loopback

iface ${interfaceDevice} inet dhcp
`;
}

const settingManager = new SettingManager(settings);
const {type, address, netmask, gateway} = parseInterface(interfacesData, interfaceDevice);

settingManager.set({auto: type === "dhcp", address, netmask, gateway});
settingManager.on("change", saveSettings);
settingManager.on("network-change", updateNetworkSettings);

function saveSettings() {
  log("info", "Writing new settings to file system");
  writeFile(filename, settingManager.json, (error) => {
    if(error) {
      log("error", `Failed to write settings to file system: ${error.message}`);
    } else {
      log("info", "Settings successfully written to file system");
    }
  });
}

function updateNetworkSettings() {
  const {auto, address, netmask, gateway} = settingManager.model;
  if(auto) {
    interfacesData = replaceInterface(interfacesData, interfaceDevice, {type: "dhcp"});
  } else {
    interfacesData = replaceInterface(interfacesData, interfaceDevice, {type: "static", address, netmask, gateway});
  }
  log("info", "Writing network interfaces to file system");
  writeFile(interfacesFile, interfacesData, (error) => {
    if(error) {
      log("error", `Failed to write network interfaces to file system: ${error.message}`);
    } else {
      log("info", "Network interfaces successfully written to file system");
    }
  });
}

export default settingManager;
